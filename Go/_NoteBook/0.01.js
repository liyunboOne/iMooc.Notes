1-2
	1. >>Go语言的特点
		1. 静态类型、编译型的开源语言
			1. 在编程过程中需要明确每一个变量的类型
				1. 可以将变量的类型写在变量的旁边
				2. 也可以不写变量的类型，由编译器去推导出变量的类型
			2. 编译型语言：在程序运行之前先编译成二进制机器代码
		2. 脚本化的语法，支持多种编程范式（函数式，面向对象，非常松散利于入门）
		3. 原生、给力的并发支持并发编程
			1. 原生支持和函数库支持是有明显的区别的
	2. >>Go语言的优势
		1. 脚本化的语法，容易入门，开发效率高
		2. 静态类型+编译型，保障了Go语言的运行速度
		3. 原生、给力的并发支持并发编程
			1. 降低开发、维护成本
			2. 程序可以更好的执行
	3. >>Go语言的劣势
		1. 语法糖并没有Python和Ruby多；
		2. 目前的程序运行速度还不及C；比C++、java快
		3. 第三方函数库暂时不像绝对主流的编程语言那样多

1-3
	linux下的安装

2-1
	工作区和GOPATH
		工作区和GOPATH
			工作区是放置Go源码文件的目录
				一般情况下，Go源码文件都需要放置到工作区中
					对于'命令源码文件'推荐放置到工作区中，但并不是必需的
			每一个工作区的结构，都类似下图所示：
				/home/hypermind/golib:
					src/
						// src: 用于存放源码，以代码包为组织形式；src下面可能有若干子目录，每级子目录就是一个代码包
					pkg/
						// pkg: 用于存放归档文件'(名称以.a为后缀的文件)'，所有归档文件都会被存放到该目录下的平台相关目录中，同样以代码包为组织形式；
							// `平台相关目录`：两个隐含的Go语言环境变量：GOOS和GOARCH
								// GOOS: 操作系统
								// GOARCH: 计算架构
									// 以$GOOS_$GOARCH为命名方式，如linux_amd64
										// 所有的编译后的函数库或代码包会安装到：
											// <工作区目录>/pkg/<平台相关目录>/<一级代码包>/<二级代码包>/<末级代码包>.a
					bin/
						// bin: 用于存放当前工作区中的Go程序的可执行文件；
							// 有两种情况bin目录会变得没有意义：
								// 1.当环境变量GOBIN已有效设置时，该目录会变的无意义;
								// 2.当GOPATH的值中包含多个工作区的路径时，必须设置GOBIN，否则无法成功安装Go程序的可执行文件
		源码文件的分类和含义？
		代码包相关知识？


