1-2
	1. >>Go语言的特点
		1. 静态类型、编译型的开源语言
			1. 在编程过程中需要明确每一个变量的类型
				1. 可以将变量的类型写在变量的旁边
				2. 也可以不写变量的类型，由编译器去推导出变量的类型
			2. 编译型语言：在程序运行之前先编译成二进制机器代码
		2. 脚本化的语法，支持多种编程范式（函数式，面向对象，非常松散利于入门）
		3. 原生、给力的并发支持并发编程
			1. 原生支持和函数库支持是有明显的区别的
	2. >>Go语言的优势
		1. 脚本化的语法，容易入门，开发效率高
		2. 静态类型+编译型，保障了Go语言的运行速度
		3. 原生、给力的并发支持并发编程
			1. 降低开发、维护成本
			2. 程序可以更好的执行
	3. >>Go语言的劣势
		1. 语法糖并没有Python和Ruby多；
		2. 目前的程序运行速度还不及C；比C++、java快
		3. 第三方函数库暂时不像绝对主流的编程语言那样多

1-3 linux下的安装
	

2-1 工作区和GOPATH
		工作区和GOPATH
			工作区是放置Go源码文件的目录
				一般情况下，Go源码文件都需要放置到工作区中
					对于'命令源码文件'推荐放置到工作区中，但并不是必需的
			每一个工作区的结构，都类似下图所示：
				/home/hypermind/golib:
					src/
						// src: 用于存放源码，以代码包为组织形式；src下面可能有若干子目录，每级子目录就是一个代码包
					pkg/
						// pkg: 用于存放归档文件'(名称以.a为后缀的文件)'，所有归档文件都会被存放到该目录下的平台相关目录中，同样以代码包为组织形式；
							// `平台相关目录`：两个隐含的Go语言环境变量：GOOS和GOARCH
								// GOOS: 操作系统
								// GOARCH: 计算架构
									// 以$GOOS_$GOARCH为命名方式，如linux_amd64
										// 所有的编译后的函数库或代码包会安装到：
											// <工作区目录>/pkg/<平台相关目录>/<一级代码包>/<二级代码包>/<末级代码包>.a
					bin/
						// bin: 用于存放当前工作区中的Go程序的可执行文件；
							// 有两种情况bin目录会变得没有意义：
								// 1.当环境变量GOBIN已有效设置时，该目录会变的无意义;
								// 2.当GOPATH的值中包含多个工作区的路径时，必须设置GOBIN，否则无法成功安装Go程序的可执行文件
		源码文件的分类和含义？
		代码包相关知识？


2-2 源码文件的分类和含义
	1. Go源码文件
		名称以'.go'为后缀，内容以Go语言代码组织的文件，多个Go源码文件是需要用代码包组织起来的
		源码文件分为三类: 命令源码文件、 库源码文件（go语言程序）、测试源码文件（辅助源码文件）
			命令源码文件: '声明自己属于main代码包'、'包含无参数声明和结果声明的main函数';被安装后，相应的可执行文件会被存放到GOBIN环境变量所指向的'目录'或'<当前工作区目录>'/'bin'下
			命令源码文件是'Go程序的入口'，但不建议把程序都写在一个文件中;'同一个代码包中强烈不建议直接包含多个命令源码文件'。
		库源码文件: 不具备命令源码文件的那两个特征的源码文件, 被安装后，相应的归档文件会被存放到'<当前工作区目录>'/'pkg'/'<平台相关目录>'下
		测试源码文件: 不具备命令源码文件的那两个特征的源码文件。
			名称以'_test.go'为后缀。
			其中至少有一个函数的名称以'Test'或'Benchmark'为前缀。并且，该函数接受一个类型为'*testing.T'或'*testing.B'的参数
			func TestFind(t *testing.T){'省略若干条语句'} 
			func BenchmarkFind(b *testing.B){'省略若干条语句'}
	2. 代码包的相关知识
		代码包的作用: 编译和归档Go程序的最基本单位。代码划分、集结和依赖的有效组织形式，也是权限控制的辅助手段
		代码包的规则: 一个代码包实际上就是一个由导入路径代表的'目录';导入路径即'<工作区目录>/src'或'<工作区目录>/pkg/<平台相关目录>'之下的某段'子路径'
			例如:代码包'hypermind.cn'可以对应于/home/hypermind/golib/src/hypermind.cn目录。（其中 /home/hypermind/golib是一个工作区目录）
		代码包的声明:'每个源码文件必须声明其所属的代码包';同一个代码包中的所有源码文件声明的代码包应该是相同的。
		代码包声明与代码包导入路径的区别:
		代码包声明:代码包声明语句中的包名称应该是该代码包的导入路径的'最右子路径'，例如:hypermind.cn/pkgtool package pkgtool
		代码包导入:语句中使用的包名称应该与其导入路径一致，例如: flag fmt strings import("flag" "fmt" "strings")
		代码包的导入方法:带别名的导入:import str "strings" str.HasPrefix("abc","a")
		本地化的导入:import ."strings" HasPrefix("abc","a")
		仅仅初始化:import _"strings" 仅执行代码包中的初始化函数

		代码包的初始化
		代码包初始化函数即：'无参数声明和结果声明的init函数'
		'init函数可以被声明在任何文件中，且可以有多个'

		init函数的执行时机-----单一代码包内
		对所有全局变量进行求值-->执行所有的init函数。

		init函数的执行时机-----不同代码包之间
		注意：我们不应该对在同一个代码包中被导入的多个代码包的init函数的执行顺序做出假设！

		执行被导入的代码包中的init函数-->执行导入它的那个代码包的init函数
		导入顺序 A -> B -> C
		执行顺序 C    B    A

		init函数的执行时机-----所有涉及到的代码包

 3-1 go run 命令简介
 	用于运行命令源码文件
 	只能接受一个命令源码文件，以及若干个库源码文件，做为参数
 	其内部操作步骤：
 		'先编译作为文件参数的源码文件'-编译>'编译结果放到临时文件夹中'-运行编译的结果>包含'可执行文件'和'归档文件'



















